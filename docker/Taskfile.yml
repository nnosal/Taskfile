---
version: '3'

#vars: 
#  DOCKER_DEFAULT_PLATFORM: linux/amd64 # M1

################################################################################################
# MAIN TASKS
################################################################################################

tasks:
  install:
    desc: Install Docker
    cmd: "wget -nv -O - https://get.docker.com/ | sh"
    status: [ docker ps || docker --version ]
  buildx:
    desc: "Buildx a Dockerfile (tag=,file=,platform=,src_path=)"
    env: { BUILDKIT_NO_CACHE: '{{ if .nocache }}1{{else}}0{{end}}', DOCKER_BUILDKIT: 1 }
    cmd: |
      docker buildx build {{ if .tag }}-t "{{.tag}}" \ {{end}}
      {{ if .file }}-f "{{.file}}" \ {{end}}
      {{ if .platform }}--platform={{.platform}} \ {{end}}
      {{ if .src_path }}.{{else}}{{.src_path}}{{end}}
  ps:
    desc: "List current containers (filter: search=)"
    aliases: [ ls ]
    cmd: docker ps -al {{.__}} {{ if .search }}| grep "{{.search}}"{{end}}
  pull:
    desc: Download a docker img=
    cmd: docker pull {{.__}} {{.name}}
    #preconditions:
    #- sh: 'command -v timeout'
    #  msg: 'Require: timeout for verification'
    #- sh: 'timeout --preserve-status --signal=9 5s docker manifest inspect "{{.name}}" && exit 0 || exit 1'
    #  msg: 'Image "{{.name}}" not exist on registry.'
    requires: { vars: [ "name" ] }
  run:
    desc: Run container with docker img=
    requires: { vars: [ "img" ] }
    cmds:
    - docker run {{ if .name }}--name "{{.name}}"{{end}} {{ if not .notmp }}--rm{{end}} {{.img}}
    #- defer: { task: rmi, vars: { name: '{{.img}}' } }
  rm:
    desc: Delete container with docker idn=
    cmd: docker rm {{.__}} {{.idn}}
    requires: { vars: [ "idn" ] }
    status: [ '! docker ps -al | grep {{.idn}}' ]
  start:
    desc: Start container with docker idn=
    cmd: docker start {{.__}} {{.idn}}
    requires: { vars: [ "idn" ] }
    status: [ 'test -n $(docker ps -a --format json | grep "{{.idn}}" | jq -r .State | grep exited) && exit 1 || exit 0' ]
  stop:
    desc: Stop container with docker idn=
    cmd: docker stop {{.__}} {{.idn}}
    requires: { vars: [ "idn" ] }
    status: [ 'test -z $(docker ps -a --format json | grep "{{.idn}}" | jq -r .State | grep exited) && exit 1 || exit 0' ]
  rmi:
    desc: Delete docker img=
    cmd: docker rmi {{.__}} {{.name}}
    preconditions:
    - sh: 'jq --version'
      msg: 'Require: jq for verification'
    - sh: 'test -z $(docker images --format json | grep "{{.name}}" | jq .Repository) && exit 1 || exit 0'
      msg: 'Image "{{.name}}" not exist (anymore).'
    requires: { vars: [ "name" ] }
