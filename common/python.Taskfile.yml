---
version: '3'

tasks:
  # POETRY
  poetry:shell:
    desc: "Run poetry venv (specify dir: if needed)"
    preconditions: [ 'poetry --version' ]
    env: { POETRY_VIRTUALENVS_IN_PROJECT: 1, POETRY_VIRTUALENVS_CREATE: 1 }
    cmd: "export LC_ALL=en_US.UTF-8; poetry shell"
    status: [ test -n "$VIRTUAL_ENV" ]
  poetry:run:
    desc: "Run poetry 'run' (specify dir: if needed)"
    preconditions: [ 'poetry --version' ]
    env: { POETRY_VIRTUALENVS_IN_PROJECT: 1, POETRY_VIRTUALENVS_CREATE: 1 }
    requires: { vars: [ "CLI_ARGS" ] }
    cmd: "export LC_ALL=en_US.UTF-8; poetry run {{.CLI_ARGS}}"
  # ANSIBLE
  ansible:run:
    desc: "Run ansible (specify dir: if needed)"
    preconditions: [ { sh: 'ansible --version', msg: 'Ansible is not installed.' } ]
    vars: { DEBUG: '{{.DEBUG | default 0}}' }
    requires: { vars: [ "host", "CLI_ARGS" ] }
    cmd: |
      ansible {{.host}} {{.CLI_ARGS}} \
      {{if eq .DEBUG "1" }}-vvv{{end}} \
      {{if .inventory}}-i {{.inventory}}{{end}}
  ansible:run:ping:
    desc: "Simply ping a host (default localhost)"
    cmd:
      task: ansible:run
      vars:
        host: '{{.host | default "localhost" }}'
        inventory: '{{.inventory | default ""}}'
        CLI_ARGS: "-m ping"
  ansible:playbook-run:
    desc: "Run ansible plabook (specify dir: if needed)"
    preconditions: [ 'ansible-playbook --version' ]
    vars: { DEBUG: '{{.DEBUG | default 0}}' }
    requires: { vars: [ "filename" ] } # .inventory # .env_args # .check
    cmd: |
      ansible-playbook {{.filename}} \
      {{if eq .DEBUG "1" }}-vvv{{end}} \
      {{if .check}}--check --diff{{end}} \
      {{if .inventory}}-i {{.inventory}}{{end}} \
      {{if .CLI_ARGS}}{{.CLI_ARGS}}{{end}} \
      {{if .env_args}} {{range $key, $value := .env_args}}-e {{$key}}={{$value}}{{end}} {{end}}
  ansible:galaxy:
    # search mysql # install geerlingguy.mysql
    desc: "Run ansible galaxy (specify dir: if needed)"
    preconditions: [ 'ansible-galaxy --version' ]
    requires: { vars: [ "CLI_ARGS" ] }
    cmd: ansible-galaxy {{.CLI_ARGS}}
  ansible:galaxy:collection:
    # ... install amazon.aws
    desc: "Run ansible galaxy-collection (specify dir: if needed)"
    preconditions: [ 'ansible-galaxy --version' ]
    requires: { vars: [ "CLI_ARGS" ] }
    cmd: ansible-galaxy collection {{.CLI_ARGS}}
